/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/entity_controller.ts":
/*!**********************************!*\
  !*** ./src/entity_controller.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.entity_controller = void 0;
const sounds_1 = __webpack_require__(/*! ./sounds */ "./src/sounds.ts");
function bounce(entity, other_entity, overlap) {
    const pos = entity.bounding_box.pos;
    const other_pos = other_entity.bounding_box.pos;
    const s = other_pos.x - pos.x > 0 ? 1 : -1;
    other_pos.x += overlap * s * 0.7;
}
function knock_back(entity, other_entity, overlap) {
    const pos = entity.bounding_box.pos;
    const other_pos = other_entity.bounding_box.pos;
    const s = other_pos.x - pos.x > 0 ? 1 : -1;
    pos.x -= overlap * s * 0.3;
}
function collision_detector(entity, other_entity) {
    const pos = entity.pos;
    const other_pos = other_entity.pos;
    const size = entity.size;
    const other_size = other_entity.size;
    if (pos.x < other_pos.x + other_size.width &&
        pos.x + size.width > other_pos.x &&
        pos.y < other_pos.y + other_size.height &&
        pos.y + size.height > other_pos.y) {
        return size.width + other_size.width - Math.abs(pos.x - other_pos.x);
    }
    return 0;
}
function entity_controller(entity, other_entity, canvas, keys, controle_keys) {
    const speed = 5;
    const jump = 20;
    entity.vel.x = 0;
    if (keys[controle_keys.left] &&
        (entity.last_key === controle_keys.left
            || entity.last_key === controle_keys.up)) {
        entity.vel.x = -speed;
    }
    if (keys[controle_keys.right] &&
        (entity.last_key === controle_keys.right
            || entity.last_key === controle_keys.up)) {
        entity.vel.x = speed;
    }
    if (keys[controle_keys.up]) {
        if (entity.bounding_box.pos.y > canvas.height - 1.05 * entity.bounding_box.size.height) {
            entity.bounding_box.pos.y -= 1.1;
            entity.vel.y = -jump;
        }
        keys.w = false;
    }
    entity.is_atacking = false;
    if (keys[controle_keys.attack]) {
        entity.is_atacking = true;
        let overlap = collision_detector(entity.attack_box, other_entity.bounding_box);
        if (overlap > 0) {
            (0, sounds_1.play_hit_sound)();
            bounce(entity, other_entity, overlap);
            knock_back(entity, other_entity, overlap);
            other_entity.life -= entity.damage;
        }
    }
    if (keys[controle_keys.down]) {
        entity.bounding_box.size.height = entity.duck_height;
    }
    else {
        entity.bounding_box.size.height = entity.standup_height;
    }
}
exports.entity_controller = entity_controller;


/***/ }),

/***/ "./src/sounds.ts":
/*!***********************!*\
  !*** ./src/sounds.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.play_hit_sound = void 0;
const HIT_SOUND = new Audio('../assets/sound/hit.mp3');
function play_hit_sound() {
    HIT_SOUND.play();
}
exports.play_hit_sound = play_hit_sound;


/***/ }),

/***/ "./src/sprite.ts":
/*!***********************!*\
  !*** ./src/sprite.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Player = void 0;
const utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
class Player {
    offset_attac_box() {
        let x_offset;
        switch (this.direction) {
            case utils_1.DIRECTION.LEFT:
                x_offset = -this.attack_box.size.width;
                break;
            case utils_1.DIRECTION.RIGHT:
                x_offset = this.bounding_box.size.width;
                break;
        }
        this.attack_box.pos.x = this.bounding_box.pos.x + x_offset;
        this.attack_box.pos.y = this.bounding_box.pos.y;
    }
    constructor(id, pos, vel, direction, style) {
        this.id = id;
        this.vel = vel;
        const height = 150;
        this.bounding_box = { pos: pos, size: { width: 50, height: height } };
        this.direction = direction;
        this.standup_height = height;
        this.duck_height = height * 0.6;
        this.style = style;
        this.attack_box = {
            pos: { x: 0, y: 0 },
            size: { width: 100, height: 50 }
        };
        this.offset_attac_box();
        this.life = 100;
        this.damage = 1;
    }
    draw(c) {
        c.fillStyle = this.style;
        c.fillRect(this.bounding_box.pos.x, this.bounding_box.pos.y, this.bounding_box.size.width, this.bounding_box.size.height);
        if (this.is_atacking) {
            c.fillStyle = 'red';
            // if(KeyboardEvent.
            c.fillRect(this.attack_box.pos.x, this.attack_box.pos.y, this.attack_box.size.width, this.attack_box.size.height);
        }
    }
    update(c, canvas, gravity, other) {
        this.draw(c);
        this.offset_attac_box();
        let diff = other.bounding_box.pos.x - this.bounding_box.pos.x;
        if (diff > 0) {
            this.direction = utils_1.DIRECTION.RIGHT;
        }
        ;
        if (diff < 0) {
            this.direction = utils_1.DIRECTION.LEFT;
        }
        ;
        if (this.bounding_box.pos.y + this.bounding_box.size.height >= canvas.height) {
            this.vel.y = 0;
            this.bounding_box.pos.y -=
                this.bounding_box.pos.y + this.bounding_box.size.height - canvas.height;
        }
        else {
            this.vel.y += gravity;
        }
        if (this.bounding_box.pos.x <= 0) {
            this.bounding_box.pos.x = 1;
        }
        if (this.bounding_box.pos.x + this.bounding_box.size.width >= canvas.width) {
            this.bounding_box.pos.x = canvas.width - this.bounding_box.size.width - 1;
        }
        this.bounding_box.pos.x += this.vel.x;
        this.bounding_box.pos.y += this.vel.y;
        this.life_display = Math.max(this.life, 0);
        let life_text = document.getElementById(`health${this.id}`);
        life_text.innerHTML = `health P1: ${this.life_display}`;
    }
}
exports.Player = Player;


/***/ }),

/***/ "./src/status_bar.ts":
/*!***************************!*\
  !*** ./src/status_bar.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FillBar = void 0;
const utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
class FillBar {
    constructor(box, fill_fraction, fill_dir) {
        this.box = box;
        this.fill_fraction = fill_fraction;
        this.fill_dir = fill_dir;
    }
    update(new_fill_fraction) {
        this.fill_fraction = new_fill_fraction;
        if (this.fill_fraction > 0.8) {
            this.color = 'green';
        }
        else if (this.fill_fraction > 0.7) {
            this.color = 'lightgreen';
        }
        else if (this.fill_fraction > 0.6) {
            this.color = 'yellow';
        }
        else if (this.fill_fraction > 0.3) {
            this.color = 'orange';
        }
        else {
            this.color = 'red';
        }
    }
    draw(c) {
        c.fillStyle = this.color;
        c.strokeStyle = this.color;
        let w = this.fill_fraction;
        c.beginPath();
        c.rect(this.box.pos.x, this.box.pos.y, this.box.size.width, this.box.size.height);
        c.stroke();
        switch (this.fill_dir) {
            case utils_1.DIRECTION.RIGHT:
                c.fillRect(this.box.pos.x, this.box.pos.y, w * this.box.size.width, this.box.size.height);
                break;
            case utils_1.DIRECTION.LEFT:
                c.fillRect(this.box.pos.x + (1 - w) * this.box.size.width, this.box.pos.y, w * this.box.size.width, this.box.size.height);
                break;
        }
    }
}
exports.FillBar = FillBar;


/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DIRECTION = exports.vec2d = void 0;
class vec2d {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
exports.vec2d = vec2d;
var DIRECTION;
(function (DIRECTION) {
    DIRECTION[DIRECTION["LEFT"] = -1] = "LEFT";
    DIRECTION[DIRECTION["RIGHT"] = 1] = "RIGHT";
})(DIRECTION || (exports.DIRECTION = DIRECTION = {}));
;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const sprite_1 = __webpack_require__(/*! ./sprite */ "./src/sprite.ts");
const entity_controller_1 = __webpack_require__(/*! ./entity_controller */ "./src/entity_controller.ts");
const status_bar_1 = __webpack_require__(/*! ./status_bar */ "./src/status_bar.ts");
const utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
const CANVAS = document.querySelector('canvas');
let CONTEXT = CANVAS.getContext('2d');
CONTEXT.fillRect(0, 0, CANVAS.width, CANVAS.height);
const GRAVITY = 0.7;
const HEALTH_WIDTH = 300;
const HEALTH_HEIGHT = 9;
const PLAYER = new sprite_1.Player(1, { x: 1, y: 0 }, { x: 0, y: 0 }, utils_1.DIRECTION.RIGHT, 'green');
const HEALT_BAR_PLAYER = new status_bar_1.FillBar({ pos: { x: 10, y: 10 }, size: { width: HEALTH_WIDTH, height: HEALTH_HEIGHT } }, 1, utils_1.DIRECTION.RIGHT);
const ENEMY = new sprite_1.Player(2, { x: 500, y: 10 }, { x: 0, y: 0 }, utils_1.DIRECTION.LEFT, 'blue');
const HEALT_BAR_ENEMY = new status_bar_1.FillBar({ pos: { x: CANVAS.width - HEALTH_WIDTH - 10, y: 10 }, size: { width: HEALTH_WIDTH, height: HEALTH_HEIGHT } }, 1, utils_1.DIRECTION.LEFT);
let KEYS = {};
let PLAYER_CONTROLLER_KEYS = { left: 'a', right: 'd', up: 'w', down: 's', attack: 'c' };
let ENEMY_CONTROLLER_KEYS = { left: 'ArrowLeft', right: 'ArrowRight', up: 'ArrowUp', down: 'ArrowDown', attack: ',' };
function animate() {
    requestAnimationFrame(animate);
    CONTEXT.fillStyle = 'black';
    CONTEXT.fillRect(0, 0, CANVAS.width, CANVAS.height);
    PLAYER.update(CONTEXT, CANVAS, GRAVITY, ENEMY);
    HEALT_BAR_PLAYER.update(PLAYER.life_display / 100);
    HEALT_BAR_PLAYER.draw(CONTEXT);
    ENEMY.update(CONTEXT, CANVAS, GRAVITY, PLAYER);
    HEALT_BAR_ENEMY.update(ENEMY.life_display / 100);
    HEALT_BAR_ENEMY.draw(CONTEXT);
    (0, entity_controller_1.entity_controller)(PLAYER, ENEMY, CANVAS, KEYS, PLAYER_CONTROLLER_KEYS);
    (0, entity_controller_1.entity_controller)(ENEMY, PLAYER, CANVAS, KEYS, ENEMY_CONTROLLER_KEYS);
}
animate();
window.addEventListener('keydown', (event) => {
    KEYS[event.key] = true;
    if (Object.values(PLAYER_CONTROLLER_KEYS).includes(event.key)) {
        PLAYER.last_key = event.key;
    }
    if (Object.values(ENEMY_CONTROLLER_KEYS).includes(event.key)) {
        ENEMY.last_key = event.key;
    }
});
window.addEventListener('keyup', (event) => { KEYS[event.key] = false; });

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,